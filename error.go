package yelp

//ErrorType is a definition to help distinguish between various returned errors
//and the subsequent actions to take. Usually in any other case than the
//ErrorTypeInvalidYelpResponse the program using this framework is doing
//something wrong. In the case the returned error type is ErrorTypeInvalidYelpResponse
//then a subsequent attempt at querying Yelp might prove successfull
type ErrorType byte

const (
	ErrorTypeInvalidArgumentDefinition ErrorType = iota
	ErrorTypeInvalidArgumentRepetition
	ErrorTypeInvalidYelpResponse
	ErrorTypeHTTPFailure
	ErrorTypeReadFailure
	ErrorTypeWriteFailure
	ErrorTypeOAuthFailure
	//Note: If this value starts exceeding 8 error type values, update the
	//'ErrorType' definition to be larger than a byte
)

func (e ErrorType) String() string {
	switch e {
	case ErrorTypeInvalidArgumentDefinition:
		return "Invalid argument definition"
	case ErrorTypeInvalidArgumentRepetition:
		return "Invalid repetition of argument"
	case ErrorTypeInvalidYelpResponse:
		return "Invalid response from Yelp"
	case ErrorTypeHTTPFailure:
		return "HTTP request failure"
	case ErrorTypeReadFailure:
		return "Read failure"
	case ErrorTypeWriteFailure:
		return "Write failure"
	case ErrorTypeOAuthFailure:
		return "OAuth failure"
	default:
		return "Unknown"
	}
}

//The Error structure represents and error generated by the Yelp framework. It
//contains a source and a message. When invoked and printed, the source and
//the message will be printed on a seperate line
type Error struct {
	EType   ErrorType
	source  string
	message string
}

func (e Error) Error() string {
	//performance is not interesting with error printing
	return "Type: " + e.EType.String() +
		"\nSource: " + e.source +
		"\nMessage: " + e.message
}
